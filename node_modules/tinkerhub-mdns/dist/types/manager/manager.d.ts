import { MDNS } from './mdns';
import { MDNSResponse } from './response';
import { MDNSQuery } from './query';
import { Record } from './records';
/**
 * Basic manager for mDNS. Manages creation of the main instance that actually
 * listens for the mDNS broadcasts.
 */
export declare class Manager {
    private transport?;
    private instances;
    private records;
    private recordExpirer;
    private recordExpirerInterval;
    constructor();
    /**
     * Remove a previously seen record.
     *
     * @param record
     */
    private removeRecord;
    private mapRecord;
    private scheduleRemoval;
    private advanceAndExpire;
    private createMulticastDNS;
    requestHandle(): MDNS;
    release(instance: MDNS): void;
    query(query: MDNSQuery): Promise<void>;
    respond(response: MDNSResponse): Promise<void>;
    find(predicate: (record: Record) => boolean): Record | undefined;
    findAll(predicate: (record: Record) => boolean): Record[];
}
//# sourceMappingURL=manager.d.ts.map