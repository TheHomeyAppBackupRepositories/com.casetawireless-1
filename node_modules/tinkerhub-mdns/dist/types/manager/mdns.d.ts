import { Subscribable } from 'atvik';
import { MDNSResponse } from './response';
import { MDNSQuery } from './query';
import { Manager } from './manager';
import { Record } from './records';
export declare class MDNS {
    private manager;
    private queryEvent;
    private responseEvent;
    private errorEvent;
    constructor(manager: Manager);
    readonly onResponse: Subscribable<this, [MDNSResponse]>;
    readonly onQuery: Subscribable<this, [MDNSQuery]>;
    readonly onError: Subscribable<this, [Error]>;
    query(query: MDNSQuery): Promise<void>;
    respond(response: MDNSResponse): Promise<void>;
    destroy(): void;
    receiveQuery(query: MDNSQuery): void;
    receiveResponse(response: MDNSResponse): void;
    receiveError(error: Error): void;
    find(predicate: (record: Record) => boolean): Record | undefined;
    findAll(predicate: (record: Record) => boolean): Record[];
}
//# sourceMappingURL=mdns.d.ts.map