/// <reference types="node" />
import { Subscribable } from 'atvik';
export interface RecordData {
    name: string;
    class?: string;
    flush?: boolean;
    ttl?: number;
}
export declare abstract class Record {
    abstract readonly type: string;
    private readonly expireEvent;
    private readonly refreshEvent;
    readonly name: string;
    readonly class: string;
    readonly flush: boolean;
    lastRefresh: number;
    ttl?: number;
    constructor(data: RecordData);
    destroy(): void;
    refresh(ttl: number): void;
    readonly remainingTTL: number | undefined;
    readonly onExpire: Subscribable<Record>;
    readonly onRefresh: Subscribable<Record>;
    isEqual(other: Record): boolean;
    protected abstract isDataEqual(other: this): boolean;
}
export declare class ARecord extends Record {
    readonly type = "A";
    readonly ip: string;
    constructor(record: RecordData & {
        ip: string;
    });
    protected isDataEqual(other: this): boolean;
}
export declare class AAAARecord extends Record {
    readonly type = "AAAA";
    readonly ip: string;
    constructor(data: RecordData & {
        ip: string;
    });
    protected isDataEqual(other: this): boolean;
}
export declare class SRVRecord extends Record {
    readonly type = "SRV";
    readonly target: string;
    readonly port: number;
    constructor(data: RecordData & {
        target: string;
        port: number;
    });
    protected isDataEqual(other: this): boolean;
}
export declare class PTRRecord extends Record {
    readonly type = "PTR";
    readonly hostname: string;
    constructor(data: RecordData & {
        hostname: string;
    });
    protected isDataEqual(other: this): boolean;
    protected toData(): string;
}
export declare class TXTRecord extends Record {
    readonly type = "TXT";
    readonly data: Map<string, string | boolean>;
    readonly binaryData: Buffer[];
    constructor(data: RecordData & {
        data: Buffer[];
        decode: boolean;
    });
    protected isDataEqual(other: this): boolean;
    protected toData(): Buffer[];
}
export declare class UnknownRecord extends Record {
    readonly type: string;
    readonly data: any;
    constructor(data: RecordData & {
        type: string;
        data: any;
    });
    protected isDataEqual(other: this): boolean;
    protected toData(): any;
}
//# sourceMappingURL=records.d.ts.map