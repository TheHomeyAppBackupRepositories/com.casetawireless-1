import { BasicServiceDiscovery } from 'tinkerhub-discovery';
import { MDNSService } from '../service';
import { Protocol } from '../protocol';
/**
 * Options available for the discovery.
 */
export interface MDNSDiscoveryOptions {
    /**
     * The type of service to look for.
     */
    type: string;
    /**
     * The protocol of the service.
     */
    protocol?: Protocol;
}
/**
 * Discovery that finds services exposed over Multicast DNS on the local
 * network.
 */
export declare class MDNSServiceDiscovery extends BasicServiceDiscovery<MDNSService> {
    private readonly searchName;
    private readonly normalizedSearchName;
    private readonly mdns;
    private readonly serviceData;
    private searchTimeout;
    private searchTime;
    private searchLastInvoke;
    private readonly ttlRefreshHelper;
    private readonly queuedRefreshes;
    constructor(options: MDNSDiscoveryOptions);
    destroy(): Promise<void>;
    /**
     * Perform a search for services on the network. This function will send
     * a query out which will cause responders to send back their records.
     *
     * Search is called:
     * 1) Periodically, with increasing query times, up to an hour of delay
     * 2) When records are nearing expiration
     */
    private search;
    /**
     * Reschedule when the search is next performed.
     */
    private rescheduleSearch;
    /**
     * Handle incoming queries. Used to reschedule searches if another client
     * on the network is seen querying for the same service as us.
     *
     * @param query
     */
    private handleQuery;
    private isSameQuery;
    private isMatching;
    private handleResponse;
    private refreshService;
    private invalidateService;
}
//# sourceMappingURL=mdns-discovery.d.ts.map