"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var tinkerhub_discovery_1 = require("tinkerhub-discovery");
var multicast_dns_service_types_1 = require("multicast-dns-service-types");
var manager_1 = require("./manager");
var id_1 = require("./id");
// Minimum delay in ms before broadcasting again
var BROADCAST_MIN_DELAY = 1000;
// Maximum number of broadcasts to send
var BROADCAST_MAX = 8;
// Factor to multiply delay with after every broadcast
var BROADCAST_DELAY_FACTOR = 3;
var LOCAL = '.local';
var ANY_TYPE = '_services._dns-sd._udp.local';
/**
 * A service published using Multicast DNS.
 */
var MDNSServicePublisher = /** @class */ (function (_super) {
    __extends(MDNSServicePublisher, _super);
    function MDNSServicePublisher(options) {
        var _this = _super.call(this, 'mdns') || this;
        _this.name = options.name || id_1.randomId();
        _this.port = options.port;
        _this.type = multicast_dns_service_types_1.stringify(options.type, options.protocol || 'tcp', options.subtypes) + LOCAL;
        _this.qualifiedName = _this.name + '.' + _this.type;
        _this.ttl = options.ttl || 4500;
        _this.mdns = manager_1.createMDNS();
        _this.mdns.onQuery(function (q) { return _this.handleQuery(q); });
        var initialDelay = 20 + Math.random() * 100;
        _this.broadcastTime = 0;
        _this.broadcastNumber = 0;
        _this.broadcastTimeout = setTimeout(function () { return _this.broadcast(); }, initialDelay);
        return _this;
    }
    MDNSServicePublisher.prototype.handleQuery = function (query) {
        var e_1, _a;
        try {
            for (var _b = __values(query.questions), _c = _b.next(); !_c.done; _c = _b.next()) {
                var question = _c.value;
                // We only reply to PTR queries
                if (question.type !== 'PTR')
                    continue;
                if (question.name === ANY_TYPE) {
                    if (!this.hasService(query.answers)) {
                        this.announce(true);
                    }
                }
                else if (question.name === this.type) {
                    if (!this.hasService(query.answers)) {
                        this.announce(false);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Go through known services and check if the querier knows about this
     * service.
     *
     * The following must match:
     * 1) The record must be a PTR
     * 2) The name of the record must match our type
     * 3) The hostname must match our qualified name
     * 4) The TTL must be more than half the original value
     *
     * @param answers
     */
    MDNSServicePublisher.prototype.hasService = function (answers) {
        var e_2, _a;
        try {
            for (var answers_1 = __values(answers), answers_1_1 = answers_1.next(); !answers_1_1.done; answers_1_1 = answers_1.next()) {
                var answer = answers_1_1.value;
                if (answer instanceof manager_1.PTRRecord
                    && answer.name === this.type
                    && answer.hostname === this.qualifiedName
                    && (answer.ttl && answer.ttl > this.ttl / 2)) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (answers_1_1 && !answers_1_1.done && (_a = answers_1.return)) _a.call(answers_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    MDNSServicePublisher.prototype.broadcast = function () {
        var _this = this;
        this.announce(false);
        if (++this.broadcastNumber >= BROADCAST_MAX) {
            // Reached the max number of broadcasts to perform
            return;
        }
        if (this.broadcastTime === 0) {
            // Next broadcast is for the minimum delay
            this.broadcastTime = BROADCAST_MIN_DELAY;
        }
        else {
            // Increase the delay
            this.broadcastTime = this.broadcastTime * BROADCAST_DELAY_FACTOR;
        }
        this.broadcastTimeout = setTimeout(function () { return _this.broadcast(); }, this.broadcastTime);
    };
    MDNSServicePublisher.prototype.announce = function (isAny) {
        var e_3, _a, e_4, _b;
        if (isAny) {
            this.debug('Responding to query for any services', this.qualifiedName);
        }
        else {
            this.debug('Announcing availability of service', this.qualifiedName);
        }
        var answers = [
            new manager_1.PTRRecord({
                name: isAny ? ANY_TYPE : this.type,
                ttl: this.ttl,
                flush: false,
                hostname: this.qualifiedName
            })
        ];
        var host = os_1.hostname() + LOCAL;
        var additionals = [
            new manager_1.SRVRecord({
                name: this.qualifiedName,
                ttl: this.ttl,
                flush: true,
                target: host,
                port: this.port
            })
        ];
        // Collect A and AAAA by going through network interfaces
        var ifs = os_1.networkInterfaces();
        try {
            for (var _c = __values(Object.keys(ifs)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                try {
                    for (var _e = (e_4 = void 0, __values(ifs[key])), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var address = _f.value;
                        if (address.internal)
                            continue;
                        switch (address.family) {
                            case 'IPv4':
                                additionals.push(new manager_1.ARecord({
                                    name: host,
                                    ttl: this.ttl,
                                    flush: true,
                                    ip: address.address
                                }));
                                break;
                            case 'IPv6':
                                additionals.push(new manager_1.AAAARecord({
                                    name: host,
                                    ttl: this.ttl,
                                    flush: true,
                                    ip: address.address
                                }));
                                break;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.mdns.respond(new manager_1.MDNSResponse(answers, additionals));
    };
    MDNSServicePublisher.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clearTimeout(this.broadcastTimeout);
                        return [4 /*yield*/, this.sendGoodbye()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                // Send the goodbye again in 250 ms
                                setTimeout(function () { return _this.sendGoodbye().catch(reject); }, 250);
                                // Destroy our mDNS instance
                                setTimeout(function () {
                                    try {
                                        _this.mdns.destroy();
                                        resolve();
                                    }
                                    catch (err) {
                                        reject(err);
                                    }
                                }, 500);
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MDNSServicePublisher.prototype.sendGoodbye = function () {
        return this.mdns.respond(new manager_1.MDNSResponse([
            new manager_1.PTRRecord({
                name: this.type,
                ttl: 0,
                hostname: this.qualifiedName
            })
        ]));
    };
    return MDNSServicePublisher;
}(tinkerhub_discovery_1.AbstractServicePublisher));
exports.MDNSServicePublisher = MDNSServicePublisher;
//# sourceMappingURL=publisher.js.map