"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var timer_wheel_1 = require("timer-wheel");
var transport_1 = require("./transport");
var mdns_1 = require("./mdns");
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default('th:mdns:manager');
/**
 * Basic manager for mDNS. Manages creation of the main instance that actually
 * listens for the mDNS broadcasts.
 */
var Manager = /** @class */ (function () {
    function Manager() {
        this.instances = [];
        this.records = [];
        this.recordExpirer = new timer_wheel_1.ReschedulingTimerWheel();
        this.mapRecord = this.mapRecord.bind(this);
    }
    /**
     * Remove a previously seen record.
     *
     * @param record
     */
    Manager.prototype.removeRecord = function (record) {
        var idx = this.records.findIndex(function (item) { return item === record; });
        if (idx >= 0) {
            this.recordExpirer.unschedule(record);
            this.records.splice(idx, 1);
            record.destroy();
            debug('REMOVED', record.type, record.name, ' total=', this.records.length);
        }
    };
    Manager.prototype.mapRecord = function (record) {
        var e_1, _a;
        if (record.flush) {
            /*
            * Flush indicates that the cache should flush records with the
            * same type, class and name that are older than a second.
            */
            var count = 0;
            var oneSecondAgo = Date.now() - 1000;
            try {
                for (var _b = __values(this.records), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    if (item.type === record.type
                        && item.class === record.class
                        && item.name === record.name
                        && item.lastRefresh < oneSecondAgo) {
                        this.scheduleRemoval(item, 0);
                        count++;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            debug('FLUSH', record.type, record.class, record.name, 'records=', count);
        }
        if (typeof record.ttl !== 'number')
            return record;
        var previous = this.records.find(function (item) { return item.isEqual(record); });
        if (previous) {
            // Already have a previous record with this data, refresh the TTL
            previous.refresh(record.ttl);
            this.scheduleRemoval(previous, record.ttl);
            debug('REFRESH', record.type, record.class, record.name, 'ttl=', record.ttl, 'total=', this.records.length);
            return previous;
        }
        // Register the new record
        this.records.push(record);
        this.scheduleRemoval(record, record.ttl);
        // Output some useful debug information
        debug('ADDED', record.type, record.class, record.name, 'ttl=', record.ttl, 'total=', this.records.length);
        return record;
    };
    Manager.prototype.scheduleRemoval = function (record, ttl) {
        return this.recordExpirer.schedule(record, ttl * 1000);
    };
    Manager.prototype.advanceAndExpire = function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.recordExpirer.advance()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var expired = _c.value;
                this.removeRecord(expired);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Manager.prototype.createMulticastDNS = function () {
        var _this = this;
        this.transport = transport_1.createTransport({
            mapRecord: function (record) { return _this.mapRecord(record); },
            onError: function (err) {
                var e_3, _a;
                try {
                    for (var _b = __values(_this.instances), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var instance = _c.value;
                        instance.receiveError(err);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            },
            onQuery: function (query) {
                var e_4, _a;
                try {
                    for (var _b = __values(_this.instances), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var instance = _c.value;
                        instance.receiveQuery(query);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            },
            onResponse: function (response) {
                var e_5, _a;
                try {
                    for (var _b = __values(_this.instances), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var instance = _c.value;
                        instance.receiveResponse(response);
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        });
        this.recordExpirerInterval = setInterval(function () { return _this.advanceAndExpire(); }, 1000);
    };
    Manager.prototype.requestHandle = function () {
        if (this.instances.length === 0) {
            this.createMulticastDNS();
        }
        var result = new mdns_1.MDNS(this);
        this.instances.push(result);
        return result;
    };
    Manager.prototype.release = function (instance) {
        var idx = this.instances.indexOf(instance);
        if (idx < 0)
            return;
        this.instances.splice(idx, 1);
        if (this.instances.length === 0 && this.transport) {
            this.transport.destroy();
            this.transport = undefined;
            clearInterval(this.recordExpirerInterval);
        }
    };
    Manager.prototype.query = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.transport) {
                            throw new Error('No mDNS transport instance available');
                        }
                        return [4 /*yield*/, this.transport.query(query)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Manager.prototype.respond = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.transport) {
                    throw new Error('No mDNS transport instance available');
                }
                return [2 /*return*/, this.transport.respond(response)];
            });
        });
    };
    Manager.prototype.find = function (predicate) {
        var e_6, _a;
        this.advanceAndExpire();
        try {
            for (var _b = __values(this.records), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (predicate(item)) {
                    return item;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    Manager.prototype.findAll = function (predicate) {
        var e_7, _a;
        this.advanceAndExpire();
        var result = [];
        try {
            for (var _b = __values(this.records), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (predicate(item)) {
                    result.push(item);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return result;
    };
    return Manager;
}());
exports.Manager = Manager;
//# sourceMappingURL=manager.js.map