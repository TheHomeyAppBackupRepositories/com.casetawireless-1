"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var atvik_1 = require("atvik");
var MDNS = /** @class */ (function () {
    function MDNS(manager) {
        this.manager = manager;
        this.queryEvent = new atvik_1.Event(this);
        this.responseEvent = new atvik_1.Event(this);
        this.errorEvent = new atvik_1.Event(this);
    }
    Object.defineProperty(MDNS.prototype, "onResponse", {
        get: function () {
            return this.responseEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDNS.prototype, "onQuery", {
        get: function () {
            return this.queryEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDNS.prototype, "onError", {
        get: function () {
            return this.errorEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    MDNS.prototype.query = function (query) {
        return this.manager.query(query);
    };
    MDNS.prototype.respond = function (response) {
        return this.manager.respond(response);
    };
    MDNS.prototype.destroy = function () {
        this.manager.release(this);
    };
    MDNS.prototype.receiveQuery = function (query) {
        this.queryEvent.emit(query);
    };
    MDNS.prototype.receiveResponse = function (response) {
        this.responseEvent.emit(response);
    };
    MDNS.prototype.receiveError = function (error) {
        this.errorEvent.emit(error);
    };
    MDNS.prototype.find = function (predicate) {
        return this.manager.find(predicate);
    };
    MDNS.prototype.findAll = function (predicate) {
        return this.manager.findAll(predicate);
    };
    return MDNS;
}());
exports.MDNS = MDNS;
//# sourceMappingURL=mdns.js.map