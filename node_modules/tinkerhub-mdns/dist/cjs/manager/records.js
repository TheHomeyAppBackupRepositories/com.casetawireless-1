"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var atvik_1 = require("atvik");
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
var txt_1 = require("./txt");
var Record = /** @class */ (function () {
    function Record(data) {
        this.name = data.name || '';
        this.class = data.class || 'IN';
        this.flush = data.flush || false;
        this.ttl = data.ttl;
        this.lastRefresh = Date.now();
        this.expireEvent = new atvik_1.Event(this);
        this.refreshEvent = new atvik_1.Event(this);
    }
    Record.prototype.destroy = function () {
        this.expireEvent.emit();
    };
    Record.prototype.refresh = function (ttl) {
        this.ttl = ttl;
        this.lastRefresh = Date.now();
        this.refreshEvent.emit();
    };
    Object.defineProperty(Record.prototype, "remainingTTL", {
        get: function () {
            if (!this.ttl)
                return undefined;
            var passedTTL = Math.floor((Date.now() - this.lastRefresh) / 1000);
            return this.ttl - passedTTL;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "onExpire", {
        get: function () {
            return this.expireEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "onRefresh", {
        get: function () {
            return this.refreshEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Record.prototype.isEqual = function (other) {
        if (other.type !== this.type) {
            return false;
        }
        if (other.name !== this.name) {
            return false;
        }
        return this.isDataEqual(other);
    };
    return Record;
}());
exports.Record = Record;
var ARecord = /** @class */ (function (_super) {
    __extends(ARecord, _super);
    function ARecord(record) {
        var _this = _super.call(this, record) || this;
        _this.type = 'A';
        _this.ip = record.ip;
        return _this;
    }
    ARecord.prototype.isDataEqual = function (other) {
        return this.ip === other.ip;
    };
    return ARecord;
}(Record));
exports.ARecord = ARecord;
var AAAARecord = /** @class */ (function (_super) {
    __extends(AAAARecord, _super);
    function AAAARecord(data) {
        var _this = _super.call(this, data) || this;
        _this.type = 'AAAA';
        _this.ip = data.ip;
        return _this;
    }
    AAAARecord.prototype.isDataEqual = function (other) {
        return this.ip === other.ip;
    };
    return AAAARecord;
}(Record));
exports.AAAARecord = AAAARecord;
var SRVRecord = /** @class */ (function (_super) {
    __extends(SRVRecord, _super);
    function SRVRecord(data) {
        var _this = _super.call(this, data) || this;
        _this.type = 'SRV';
        _this.target = data.target;
        _this.port = data.port;
        return _this;
    }
    SRVRecord.prototype.isDataEqual = function (other) {
        return this.target === other.target && this.port === other.port;
    };
    return SRVRecord;
}(Record));
exports.SRVRecord = SRVRecord;
var PTRRecord = /** @class */ (function (_super) {
    __extends(PTRRecord, _super);
    function PTRRecord(data) {
        var _this = _super.call(this, data) || this;
        _this.type = 'PTR';
        _this.hostname = data.hostname;
        return _this;
    }
    PTRRecord.prototype.isDataEqual = function (other) {
        return this.hostname === other.hostname;
    };
    PTRRecord.prototype.toData = function () {
        return this.hostname;
    };
    return PTRRecord;
}(Record));
exports.PTRRecord = PTRRecord;
var TXTRecord = /** @class */ (function (_super) {
    __extends(TXTRecord, _super);
    function TXTRecord(data) {
        var e_1, _a;
        var _this = _super.call(this, data) || this;
        _this.type = 'TXT';
        _this.binaryData = data.data;
        _this.data = new Map();
        if (data.decode) {
            try {
                for (var _b = __values(_this.binaryData), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    var decoded = txt_1.decodeTXT(b);
                    if (decoded) {
                        _this.data.set(decoded.key, decoded.value);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return _this;
    }
    TXTRecord.prototype.isDataEqual = function (other) {
        return fast_deep_equal_1.default(this.binaryData, this.binaryData);
    };
    TXTRecord.prototype.toData = function () {
        return this.binaryData;
    };
    return TXTRecord;
}(Record));
exports.TXTRecord = TXTRecord;
var UnknownRecord = /** @class */ (function (_super) {
    __extends(UnknownRecord, _super);
    function UnknownRecord(data) {
        var _this = _super.call(this, data) || this;
        _this.type = data.type;
        _this.data = data.data;
        return _this;
    }
    UnknownRecord.prototype.isDataEqual = function (other) {
        return fast_deep_equal_1.default(this.data, other.data);
    };
    UnknownRecord.prototype.toData = function () {
        return this.data;
    };
    return UnknownRecord;
}(Record));
exports.UnknownRecord = UnknownRecord;
//# sourceMappingURL=records.js.map