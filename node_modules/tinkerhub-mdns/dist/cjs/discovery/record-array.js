"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper class for dealing with an array of records. Will subscribe/unsubscribe
 * the refresher function as needed.
 */
var RecordArray = /** @class */ (function () {
    function RecordArray(refresher) {
        this.refresher = refresher;
        this._items = [];
        this._handles = [];
    }
    Object.defineProperty(RecordArray.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (v) {
            var e_1, _a, e_2, _b;
            var records = [];
            var handles = [];
            var remainingHandles = new Set(this._handles);
            try {
                for (var v_1 = __values(v), v_1_1 = v_1.next(); !v_1_1.done; v_1_1 = v_1.next()) {
                    var record = v_1_1.value;
                    records.push(record);
                    var idx = this._items.indexOf(record);
                    if (idx < 0) {
                        handles.push(record.onExpire(this.refresher));
                    }
                    else {
                        var handle = this._handles[idx];
                        remainingHandles.delete(handle);
                        handles.push(handle);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (v_1_1 && !v_1_1.done && (_a = v_1.return)) _a.call(v_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var remainingHandles_1 = __values(remainingHandles), remainingHandles_1_1 = remainingHandles_1.next(); !remainingHandles_1_1.done; remainingHandles_1_1 = remainingHandles_1.next()) {
                    var handle = remainingHandles_1_1.value;
                    handle.unsubscribe();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (remainingHandles_1_1 && !remainingHandles_1_1.done && (_b = remainingHandles_1.return)) _b.call(remainingHandles_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this._items = records;
            this._handles = handles;
        },
        enumerable: true,
        configurable: true
    });
    return RecordArray;
}());
exports.RecordArray = RecordArray;
//# sourceMappingURL=record-array.js.map