"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var timer_wheel_1 = require("timer-wheel");
/**
 * Helper for keeping track of when to send out a refresh query based on TTLs
 * of records.
 */
var TTLRefreshHelper = /** @class */ (function () {
    function TTLRefreshHelper(query) {
        var _this = this;
        this.query = query;
        this.records = new timer_wheel_1.ReschedulingTimerWheel();
        this.interval = setInterval(function () { return _this.check(); }, 1000);
        var self = this;
        this.listener = function () {
            self.scheduleRefresh(this);
        };
    }
    TTLRefreshHelper.prototype.destroy = function () {
        clearInterval(this.interval);
    };
    TTLRefreshHelper.prototype.add = function (record) {
        record.onRefresh.unsubscribe(this.listener);
        record.onRefresh.subscribe(this.listener);
        this.scheduleRefresh(record);
    };
    TTLRefreshHelper.prototype.remove = function (record) {
        record.onRefresh.unsubscribe(this.listener);
        this.records.unschedule(record);
    };
    TTLRefreshHelper.prototype.check = function () {
        var e_1, _a;
        var expired = this.records.advance();
        var now = Date.now();
        try {
            for (var expired_1 = __values(expired), expired_1_1 = expired_1.next(); !expired_1_1.done; expired_1_1 = expired_1.next()) {
                var record = expired_1_1.value;
                if (!record.ttl)
                    continue;
                // Calculate how much of the TTL has been used  up
                var passedTTL = (now - record.lastRefresh) / 1000;
                var remainingTTL = record.ttl - passedTTL;
                if (remainingTTL <= 0)
                    continue;
                // Calculate the ratio and increase it, skip scheduling too close to expiration
                var ratio = (record.ttl - remainingTTL) / record.ttl;
                var nextRatio = ratio + 0.05;
                if (nextRatio > 0.97)
                    return;
                // Schedule the record again
                var delay = nextRatio * record.ttl - passedTTL;
                this.records.schedule(record, delay * 1000);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expired_1_1 && !expired_1_1.done && (_a = expired_1.return)) _a.call(expired_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (expired.length > 0) {
            this.query();
        }
    };
    TTLRefreshHelper.prototype.scheduleRefresh = function (record) {
        if (!record.ttl)
            return;
        // Schedule the first TTL check at 80% + a random delay
        var ratio = 0.8 + Math.random() * 0.02;
        this.records.schedule(record, record.ttl * ratio * 1000);
    };
    return TTLRefreshHelper;
}());
exports.TTLRefreshHelper = TTLRefreshHelper;
//# sourceMappingURL=ttl-refresh-helper.js.map