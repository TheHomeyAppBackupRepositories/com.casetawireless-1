"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var timer_wheel_1 = require("./timer-wheel");
/**
 * TimerWheel for easier rescheduling of expiration of items. This wheel only
 * will not schedule the same item for expiration more than once, instead it
 * will reschedule the expiration when a duplicate item is added.
 *
 * ```javascript
 * const dataToSchedule = 'test';
 *
 * // Schedule dataToSchedule to expire in 1000 ms
 * wheel.schedule(dataToSchedule, 1000);
 *
 * // Reschedule so dataToSchedule expires in 5000 ms
 * wheel.schedule(dataToSchedule, 5000);
 * ```
 */
var ReschedulingTimerWheel = /** @class */ (function (_super) {
    __extends(ReschedulingTimerWheel, _super);
    function ReschedulingTimerWheel() {
        var _this = _super.call(this) || this;
        _this.items = new Map();
        return _this;
    }
    /**
     * Unschedule an item that has been previously scheduled.
     *
     * @param data
     */
    ReschedulingTimerWheel.prototype.unschedule = function (data) {
        var current = this.items.get(data);
        if (current) {
            current.remove();
            this.items.delete(data);
            return true;
        }
        return false;
    };
    ReschedulingTimerWheel.prototype.expireNode = function (node) {
        this.items.delete(node.data);
        _super.prototype.expireNode.call(this, node);
    };
    ReschedulingTimerWheel.prototype.scheduleNode = function (node) {
        var current = this.items.get(node.data);
        if (current) {
            // Remove the currently scheduled expiration
            current.remove();
        }
        this.items.set(node.data, node);
        return _super.prototype.scheduleNode.call(this, node);
    };
    return ReschedulingTimerWheel;
}(timer_wheel_1.TimerWheel));
exports.ReschedulingTimerWheel = ReschedulingTimerWheel;
//# sourceMappingURL=rescheduling-timer-wheel.js.map