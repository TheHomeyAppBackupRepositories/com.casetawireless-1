import { TimerWheel } from './timer-wheel';
import { TimerNode } from './timer-node';
/**
 * TimerWheel for easier rescheduling of expiration of items. This wheel only
 * will not schedule the same item for expiration more than once, instead it
 * will reschedule the expiration when a duplicate item is added.
 *
 * ```javascript
 * const dataToSchedule = 'test';
 *
 * // Schedule dataToSchedule to expire in 1000 ms
 * wheel.schedule(dataToSchedule, 1000);
 *
 * // Reschedule so dataToSchedule expires in 5000 ms
 * wheel.schedule(dataToSchedule, 5000);
 * ```
 */
export declare class ReschedulingTimerWheel<T> extends TimerWheel<T> {
    private readonly items;
    constructor();
    /**
     * Unschedule an item that has been previously scheduled.
     *
     * @param data
     */
    unschedule(data: T): boolean;
    protected expireNode(node: TimerNode<T>): void;
    protected scheduleNode(node: TimerNode<T>): import("./handle").TimerHandle;
}
//# sourceMappingURL=rescheduling-timer-wheel.d.ts.map