"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var timer_wheel_1 = require("timer-wheel");
var internal_1 = require("./internal");
/**
 * Discovery implementation that supports expiring services after a certain
 * amount of time.
 */
var ExpiringServiceDiscovery = /** @class */ (function (_super) {
    __extends(ExpiringServiceDiscovery, _super);
    function ExpiringServiceDiscovery(type, options) {
        var _this = this;
        if (!options) {
            throw new Error('options must be specified');
        }
        if (!options.expirationTime || options.expirationTime <= 0) {
            throw new Error('expirationTime option is required and needs to be a positive number');
        }
        _this = _super.call(this, type) || this;
        _this.expirationTime = options.expirationTime;
        _this.expirationWheel = new timer_wheel_1.ReschedulingTimerWheel();
        _this.expirationTimer = setInterval(_this.removeExpiredServices.bind(_this), 1000);
        return _this;
    }
    ExpiringServiceDiscovery.prototype.updateService = function (service, expirationTime) {
        var result = _super.prototype.updateService.call(this, service);
        // Schedule or reschedule the expiration of this service
        this.expirationWheel.schedule(service.id, expirationTime || this.expirationTime);
        return result;
    };
    ExpiringServiceDiscovery.prototype.removeService = function (service) {
        var result = _super.prototype.removeService.call(this, service);
        if (result) {
            // Remove from the expiration wheel
            this.expirationWheel.unschedule(result.id);
        }
        return result;
    };
    ExpiringServiceDiscovery.prototype.removeExpiredServices = function (timePassed) {
        var e_1, _a;
        var expiredServices = this.expirationWheel.advance(timePassed);
        try {
            for (var expiredServices_1 = __values(expiredServices), expiredServices_1_1 = expiredServices_1.next(); !expiredServices_1_1.done; expiredServices_1_1 = expiredServices_1.next()) {
                var serviceId = expiredServices_1_1.value;
                this.removeService(serviceId);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expiredServices_1_1 && !expiredServices_1_1.done && (_a = expiredServices_1.return)) _a.call(expiredServices_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ExpiringServiceDiscovery.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clearInterval(this.expirationTimer);
                        this.expirationTimer = undefined;
                        return [4 /*yield*/, _super.prototype.destroy.call(this)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ExpiringServiceDiscovery;
}(internal_1.BasicServiceDiscovery));
exports.ExpiringServiceDiscovery = ExpiringServiceDiscovery;
//# sourceMappingURL=expiring-service-discovery.js.map