"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var internal_1 = require("./internal");
/**
 * Merge services from several discoveries.
 */
var MergedServiceDiscovery = /** @class */ (function (_super) {
    __extends(MergedServiceDiscovery, _super);
    function MergedServiceDiscovery(discoveries) {
        var e_1, _a;
        var _this = _super.call(this, 'combined') || this;
        _this.combinedServiceData = new Map();
        _this.instances = [];
        var _loop_1 = function (discovery) {
            var handleAvailableOrUpdate = function (service) { return _this.handleAvailableOrUpdate(discovery, service); };
            var handleUnavailable = function (service) { return _this.handleUnavailable(discovery, service); };
            // Create the instance and register the events
            var instance = {
                discovery: discovery,
                handles: [
                    discovery.onAvailable(handleAvailableOrUpdate),
                    discovery.onUpdate(handleAvailableOrUpdate),
                    discovery.onUnavailable(handleUnavailable),
                    discovery.onError(this_1.handleError)
                ]
            };
            this_1.instances.push(instance);
        };
        var this_1 = this;
        try {
            for (var discoveries_1 = __values(discoveries), discoveries_1_1 = discoveries_1.next(); !discoveries_1_1.done; discoveries_1_1 = discoveries_1.next()) {
                var discovery = discoveries_1_1.value;
                _loop_1(discovery);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (discoveries_1_1 && !discoveries_1_1.done && (_a = discoveries_1.return)) _a.call(discoveries_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return _this;
    }
    MergedServiceDiscovery.prototype.release = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, instance, _c, _d, handle;
            var e_2, _e, e_3, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!this.destroyed) {
                            try {
                                // Release all of the events for every instance
                                for (_a = __values(this.instances), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    instance = _b.value;
                                    try {
                                        for (_c = (e_3 = void 0, __values(instance.handles)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                            handle = _d.value;
                                            handle.unsubscribe();
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        return [4 /*yield*/, _super.prototype.destroy.call(this)];
                    case 1:
                        _g.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MergedServiceDiscovery.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, instance, e_4_1;
            var e_4, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!this.destroyed) return [3 /*break*/, 8];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(this.instances), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        instance = _b.value;
                        return [4 /*yield*/, instance.discovery.destroy()];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 8: return [4 /*yield*/, this.release()];
                    case 9:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MergedServiceDiscovery.prototype.handleError = function (error) {
        _super.prototype.logAndEmitError.call(this, error);
    };
    MergedServiceDiscovery.prototype.handleAvailableOrUpdate = function (discovery, service) {
        var data = this.combinedServiceData.get(service.id);
        if (data) {
            // A service with this identifier is currently available
            var discoveryIndex = data.discoveries.indexOf(discovery);
            if (discoveryIndex < 0) {
                // Service is new for this discovery
                data.services.push(service);
                data.discoveries.push(discovery);
            }
            else {
                // Update the current service for the discovery
                data.services[discoveryIndex] = service;
            }
            if (discoveryIndex === 0 || data.discoveries.length === 1) {
                // If the service is either new or was the first service, update it
                this.updateService(service);
            }
        }
        else {
            // New service, create data and register it
            data = {
                services: [service],
                discoveries: [discovery]
            };
            this.combinedServiceData.set(service.id, data);
            // Register this as the service
            this.updateService(service);
        }
    };
    MergedServiceDiscovery.prototype.handleUnavailable = function (discovery, service) {
        var data = this.combinedServiceData.get(service.id);
        if (!data) {
            // No services registered for the id
            return;
        }
        var discoveryIndex = data.discoveries.indexOf(discovery);
        if (discoveryIndex < 0) {
            // Discovery does not actually have a service registered
            return;
        }
        data.discoveries.splice(discoveryIndex, 1);
        data.services.splice(discoveryIndex, 1);
        if (discoveryIndex !== 0) {
            // This was not the first service, no need to update service
            return;
        }
        if (data.discoveries.length === 0) {
            // Remove the service as it is no longer available
            this.removeService(service);
            this.combinedServiceData.delete(service.id);
        }
        else {
            // Update to the service that is now the first available
            this.updateService(data.services[0]);
        }
    };
    return MergedServiceDiscovery;
}(internal_1.BasicServiceDiscovery));
exports.MergedServiceDiscovery = MergedServiceDiscovery;
//# sourceMappingURL=merged-service-discovery.js.map