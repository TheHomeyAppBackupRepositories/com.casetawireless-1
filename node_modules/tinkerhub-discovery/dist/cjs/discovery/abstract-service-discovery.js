"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = __importDefault(require("debug"));
var atvik_1 = require("atvik");
var mapper_1 = require("../mapper");
var internal_1 = require("./internal");
/**
 * Abstract service discovery implementation.
 */
var AbstractServiceDiscovery = /** @class */ (function () {
    function AbstractServiceDiscovery(type) {
        this.debug = debug_1.default('th:discovery:' + type);
        this.errorEvent = new atvik_1.Event(this);
        this.availableEvent = new atvik_1.Event(this);
        this.unavailableEvent = new atvik_1.Event(this);
        this.updateEvent = new atvik_1.Event(this);
        this._destroyed = false;
        this.destroyEvent = new atvik_1.Event(this);
    }
    Object.defineProperty(AbstractServiceDiscovery.prototype, "onError", {
        get: function () {
            return this.errorEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Log and emit an error for this discovery.
     *
     * @param error
     */
    AbstractServiceDiscovery.prototype.logAndEmitError = function (error, message) {
        if (message === void 0) { message = 'An error occurred:'; }
        this.debug(message, error);
        this.errorEvent.emit(error);
    };
    Object.defineProperty(AbstractServiceDiscovery.prototype, "onAvailable", {
        get: function () {
            return this.availableEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractServiceDiscovery.prototype, "onUnavailable", {
        get: function () {
            return this.unavailableEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractServiceDiscovery.prototype, "onUpdate", {
        get: function () {
            return this.updateEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    AbstractServiceDiscovery.prototype.find = function (predicate) {
        var e_1, _a;
        try {
            for (var _b = __values(this.services), _c = _b.next(); !_c.done; _c = _b.next()) {
                var service = _c.value;
                if (predicate(service)) {
                    return service;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    AbstractServiceDiscovery.prototype.findAll = function (predicate) {
        var e_2, _a;
        var result = [];
        try {
            for (var _b = __values(this.services), _c = _b.next(); !_c.done; _c = _b.next()) {
                var service = _c.value;
                if (predicate(service)) {
                    result.push(service);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    AbstractServiceDiscovery.prototype.filter = function (predicate) {
        return new internal_1.FilteredServiceDiscovery(this, predicate);
    };
    AbstractServiceDiscovery.prototype.map = function (mapper) {
        if (mapper_1.isAdvancedMapper(mapper)) {
            // If called using an advanced mapper create directly
            return new internal_1.MappedDiscovery(this, mapper);
        }
        // Create an advanced mapper from the mapping function
        return new internal_1.MappedDiscovery(this, {
            create: mapper
        });
    };
    AbstractServiceDiscovery.prototype.and = function (other) {
        throw new internal_1.MergedServiceDiscovery([this, other]);
    };
    AbstractServiceDiscovery.prototype.destroy = function () {
        if (this.destroyed)
            return Promise.resolve();
        this._destroyed = true;
        this.destroyEvent.emit();
        return Promise.resolve();
    };
    Object.defineProperty(AbstractServiceDiscovery.prototype, "destroyed", {
        get: function () {
            return this._destroyed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractServiceDiscovery.prototype, "onDestroy", {
        get: function () {
            return this.destroyEvent.subscribable;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractServiceDiscovery;
}());
exports.AbstractServiceDiscovery = AbstractServiceDiscovery;
//# sourceMappingURL=abstract-service-discovery.js.map