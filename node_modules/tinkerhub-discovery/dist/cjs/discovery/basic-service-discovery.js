"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var internal_1 = require("./internal");
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
/**
 * Basic discovery intended for extension. This type of discovery provides
 * functions to update, remove and set services available.
 */
var BasicServiceDiscovery = /** @class */ (function (_super) {
    __extends(BasicServiceDiscovery, _super);
    function BasicServiceDiscovery(type) {
        var _this = _super.call(this, type) || this;
        _this.serviceMap = new Map();
        return _this;
    }
    Object.defineProperty(BasicServiceDiscovery.prototype, "services", {
        /**
         * Get all the available services.
         */
        get: function () {
            return Array.from(this.serviceMap.values());
        },
        enumerable: true,
        configurable: true
    });
    BasicServiceDiscovery.prototype.get = function (id) {
        return this.serviceMap.get(id) || null;
    };
    /**
     * Add or update a service that has been found.
     *
     * @param {object} service
     */
    BasicServiceDiscovery.prototype.updateService = function (service) {
        if (typeof service !== 'object' || service === null) {
            throw new Error('A service object is required');
        }
        if (!service.id) {
            throw new Error('Services must have an identifier');
        }
        var registration = this.serviceMap.get(service.id);
        if (registration) {
            /*
             * This service is already available, check if the new registration
             * has changed.
             */
            if (fast_deep_equal_1.default(registration, service)) {
                // Both are the same, do nothing
                return null;
            }
            // The service has been updated, emit an update event
            this.debug('Service with id', service.id, 'has been updated');
            this.serviceMap.set(service.id, service);
            this.updateEvent.emit(service, registration);
            return registration;
        }
        else {
            // The service is not currently available
            this.debug('Service with id', service.id, 'is now available');
            this.serviceMap.set(service.id, service);
            this.availableEvent.emit(service);
            return null;
        }
    };
    /**
     * Remove a service that is no longer available.
     */
    BasicServiceDiscovery.prototype.removeService = function (service) {
        if (typeof service === 'undefined' || service === null)
            return null;
        var id = typeof service === 'string' ? service : service.id;
        var registration = this.serviceMap.get(id);
        if (registration) {
            /*
             * Service is currently available, remove it and emit an event.
             */
            this.debug('Service with id', id, 'is no longer available');
            this.serviceMap.delete(id);
            this.unavailableEvent.emit(registration);
            return registration;
        }
        return null;
    };
    /**
     * Set the services that should be available.
     *
     */
    BasicServiceDiscovery.prototype.setServices = function (available) {
        var e_1, _a, e_2, _b;
        var ids = new Set();
        try {
            for (var available_1 = __values(available), available_1_1 = available_1.next(); !available_1_1.done; available_1_1 = available_1.next()) {
                var service = available_1_1.value;
                ids.add(service.id);
                this.updateService(service);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (available_1_1 && !available_1_1.done && (_a = available_1.return)) _a.call(available_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // Remove all services that are no longer available
            for (var _c = __values(this.serviceMap.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var id = _d.value;
                if (!ids.has(id)) {
                    this.removeService(id);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return BasicServiceDiscovery;
}(internal_1.AbstractServiceDiscovery));
exports.BasicServiceDiscovery = BasicServiceDiscovery;
//# sourceMappingURL=basic-service-discovery.js.map