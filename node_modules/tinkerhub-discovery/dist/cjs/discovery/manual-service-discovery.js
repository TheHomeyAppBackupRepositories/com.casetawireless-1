"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var internal_1 = require("./internal");
/**
 * Discovery implementation for manually adding or removing available services.
 */
var ManualDiscovery = /** @class */ (function (_super) {
    __extends(ManualDiscovery, _super);
    function ManualDiscovery(type) {
        if (type === void 0) { type = 'manual'; }
        return _super.call(this, type) || this;
    }
    /**
     * Add a service that should be available.
     *
     * @param service
     */
    ManualDiscovery.prototype.add = function (service) {
        return this.updateService(service);
    };
    /**
     * Remove a service so that it is no longer available.
     *
     * @param service
     */
    ManualDiscovery.prototype.remove = function (service) {
        return this.removeService(service);
    };
    /**
     *
     * @param services
     */
    ManualDiscovery.prototype.set = function (services) {
        return this.setServices(services);
    };
    return ManualDiscovery;
}(internal_1.BasicServiceDiscovery));
exports.ManualDiscovery = ManualDiscovery;
//# sourceMappingURL=manual-service-discovery.js.map