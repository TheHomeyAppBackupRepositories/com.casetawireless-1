import debug from 'debug';
import { Event } from 'atvik';
import { Service } from '../service';
import { ServicePredicate } from '../predicate';
import { AdvancedMapper, Mapper } from '../mapper';
import { ServiceDiscovery } from './service-discovery';
/**
 * Abstract service discovery implementation.
 */
export declare abstract class AbstractServiceDiscovery<S extends Service> implements ServiceDiscovery<S> {
    /**
     * Debugger that can be used to output debug messages for the discovery.
     */
    protected readonly debug: debug.Debugger;
    /**
     * Event used to emit errors for this discovery.
     */
    private readonly errorEvent;
    /**
     * Event used to emit when a service is available.
     */
    protected readonly availableEvent: Event<this, [S]>;
    /**
     * Event used to emit when a service is no longer available.
     */
    protected readonly unavailableEvent: Event<this, [S]>;
    /**
     * Event used to emit when a service has been updated.
     */
    protected readonly updateEvent: Event<this, [S, S]>;
    /**
     * Services that are available from this discovery.
     */
    abstract services: S[];
    /**
     * Get if this discovery has been destroyed.
     */
    private _destroyed;
    /**
     * Event used to emit when this discovery is destroyed.
     */
    private readonly destroyEvent;
    constructor(type: string);
    readonly onError: import("atvik").Subscribable<this, [Error]>;
    /**
     * Log and emit an error for this discovery.
     *
     * @param error
     */
    protected logAndEmitError(error: Error, message?: string): void;
    readonly onAvailable: import("atvik").Subscribable<this, [S]>;
    readonly onUnavailable: import("atvik").Subscribable<this, [S]>;
    readonly onUpdate: import("atvik").Subscribable<this, [S, S]>;
    abstract get(id: string): S | null;
    find(predicate: ServicePredicate<S>): S | null;
    findAll(predicate: ServicePredicate<S>): S[];
    filter(predicate: ServicePredicate<S>): ServiceDiscovery<S>;
    map<O extends Service>(mapper: AdvancedMapper<S, O> | Mapper<S, O>): ServiceDiscovery<O>;
    and<O extends Service>(other: ServiceDiscovery<O>): ServiceDiscovery<S | O>;
    destroy(): Promise<void>;
    readonly destroyed: boolean;
    readonly onDestroy: import("atvik").Subscribable<this, []>;
}
//# sourceMappingURL=abstract-service-discovery.d.ts.map