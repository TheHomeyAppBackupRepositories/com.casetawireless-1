import { ExpiringServiceDiscovery } from './expiring-service-discovery';
import { Service } from '../service';
export interface TimedDiscoveryOptions {
    /**
     * The number of milliseconds a service is kept before it's removed unless
     * it receives updates.
     */
    expirationTime: number;
    /**
     * The interval at which to search for services.
     */
    searchTime: number;
}
export declare abstract class TimedServiceDiscovery<S extends Service> extends ExpiringServiceDiscovery<S> {
    private readonly searchInterval;
    constructor(type: string, options: TimedDiscoveryOptions);
    /**
     * Perform a search for services.
     */
    protected abstract search(): void;
    destroy(): Promise<void>;
}
//# sourceMappingURL=timed-service-discovery.d.ts.map