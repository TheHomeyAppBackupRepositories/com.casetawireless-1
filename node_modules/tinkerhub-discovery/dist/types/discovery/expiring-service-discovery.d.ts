import { BasicServiceDiscovery } from './internal';
import { Service } from '../service';
/**
 * Options available when creating an expiring discovery.
 */
export interface ExpiringDiscoveryOptions {
    /**
     * The number of milliseconds a service remains discovered without any
     * updates.
     */
    expirationTime: number;
}
/**
 * Discovery implementation that supports expiring services after a certain
 * amount of time.
 */
export declare abstract class ExpiringServiceDiscovery<S extends Service> extends BasicServiceDiscovery<S> {
    readonly expirationTime: number;
    private readonly expirationWheel;
    private expirationTimer;
    constructor(type: string, options: ExpiringDiscoveryOptions);
    protected updateService(service: S, expirationTime?: number): S | null;
    protected removeService(service: S | string): S | null;
    protected removeExpiredServices(timePassed?: number): void;
    destroy(): Promise<void>;
}
//# sourceMappingURL=expiring-service-discovery.d.ts.map