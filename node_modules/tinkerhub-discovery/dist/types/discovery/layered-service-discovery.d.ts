import { ServiceDiscovery } from './service-discovery';
import { ReleaseableServiceDiscovery } from './releaseable-service-discovery';
import { Service } from '../service';
import { BasicServiceDiscovery } from './internal';
/**
 * Abstract discovery for implementing layers, such as filtering and mapping.
 */
export declare abstract class LayeredServiceDiscovery<S extends Service, P extends Service> extends BasicServiceDiscovery<S> implements ReleaseableServiceDiscovery<S> {
    protected readonly parent: ServiceDiscovery<P>;
    constructor(type: string, parent: ServiceDiscovery<P>);
    /**
     * Handle that a service is now available.
     *
     * @param service
     */
    protected abstract handleParentServiceAvailable(service: P): void;
    /**
     * Handle that a service is no longer available.
     *
     * @param service
     */
    protected abstract handleParentServiceUnavailable(service: P): void;
    /**
     * Handle that a service has been updated.
     */
    protected abstract handleParentServiceUpdate(service: P, previousService: P): void;
    /**
     * Release this discovery, it will no longer receive any service updates.
     */
    release(): Promise<void>;
    /**
     * Destroy this discovery and its parent.
     */
    destroy(): Promise<void>;
}
//# sourceMappingURL=layered-service-discovery.d.ts.map