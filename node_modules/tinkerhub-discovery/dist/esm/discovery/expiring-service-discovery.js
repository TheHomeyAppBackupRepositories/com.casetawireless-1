var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ReschedulingTimerWheel } from 'timer-wheel';
import { BasicServiceDiscovery } from './internal';
/**
 * Discovery implementation that supports expiring services after a certain
 * amount of time.
 */
export class ExpiringServiceDiscovery extends BasicServiceDiscovery {
    constructor(type, options) {
        if (!options) {
            throw new Error('options must be specified');
        }
        if (!options.expirationTime || options.expirationTime <= 0) {
            throw new Error('expirationTime option is required and needs to be a positive number');
        }
        super(type);
        this.expirationTime = options.expirationTime;
        this.expirationWheel = new ReschedulingTimerWheel();
        this.expirationTimer = setInterval(this.removeExpiredServices.bind(this), 1000);
    }
    updateService(service, expirationTime) {
        const result = super.updateService(service);
        // Schedule or reschedule the expiration of this service
        this.expirationWheel.schedule(service.id, expirationTime || this.expirationTime);
        return result;
    }
    removeService(service) {
        const result = super.removeService(service);
        if (result) {
            // Remove from the expiration wheel
            this.expirationWheel.unschedule(result.id);
        }
        return result;
    }
    removeExpiredServices(timePassed) {
        const expiredServices = this.expirationWheel.advance(timePassed);
        for (const serviceId of expiredServices) {
            this.removeService(serviceId);
        }
    }
    destroy() {
        const _super = Object.create(null, {
            destroy: { get: () => super.destroy }
        });
        return __awaiter(this, void 0, void 0, function* () {
            clearInterval(this.expirationTimer);
            this.expirationTimer = undefined;
            yield _super.destroy.call(this);
        });
    }
}
//# sourceMappingURL=expiring-service-discovery.js.map