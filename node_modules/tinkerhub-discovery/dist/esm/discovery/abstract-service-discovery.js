import debug from 'debug';
import { Event } from 'atvik';
import { isAdvancedMapper } from '../mapper';
import { FilteredServiceDiscovery, MappedDiscovery, MergedServiceDiscovery } from './internal';
/**
 * Abstract service discovery implementation.
 */
export class AbstractServiceDiscovery {
    constructor(type) {
        this.debug = debug('th:discovery:' + type);
        this.errorEvent = new Event(this);
        this.availableEvent = new Event(this);
        this.unavailableEvent = new Event(this);
        this.updateEvent = new Event(this);
        this._destroyed = false;
        this.destroyEvent = new Event(this);
    }
    get onError() {
        return this.errorEvent.subscribable;
    }
    /**
     * Log and emit an error for this discovery.
     *
     * @param error
     */
    logAndEmitError(error, message = 'An error occurred:') {
        this.debug(message, error);
        this.errorEvent.emit(error);
    }
    get onAvailable() {
        return this.availableEvent.subscribable;
    }
    get onUnavailable() {
        return this.unavailableEvent.subscribable;
    }
    get onUpdate() {
        return this.updateEvent.subscribable;
    }
    find(predicate) {
        for (const service of this.services) {
            if (predicate(service)) {
                return service;
            }
        }
        return null;
    }
    findAll(predicate) {
        const result = [];
        for (const service of this.services) {
            if (predicate(service)) {
                result.push(service);
            }
        }
        return result;
    }
    filter(predicate) {
        return new FilteredServiceDiscovery(this, predicate);
    }
    map(mapper) {
        if (isAdvancedMapper(mapper)) {
            // If called using an advanced mapper create directly
            return new MappedDiscovery(this, mapper);
        }
        // Create an advanced mapper from the mapping function
        return new MappedDiscovery(this, {
            create: mapper
        });
    }
    and(other) {
        throw new MergedServiceDiscovery([this, other]);
    }
    destroy() {
        if (this.destroyed)
            return Promise.resolve();
        this._destroyed = true;
        this.destroyEvent.emit();
        return Promise.resolve();
    }
    get destroyed() {
        return this._destroyed;
    }
    get onDestroy() {
        return this.destroyEvent.subscribable;
    }
}
//# sourceMappingURL=abstract-service-discovery.js.map