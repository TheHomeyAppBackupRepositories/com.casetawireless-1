import { LayeredServiceDiscovery } from './internal';
/**
 * Provides filtering of any discovery instance.
 */
export class FilteredServiceDiscovery extends LayeredServiceDiscovery {
    constructor(parent, predicate) {
        super('filtered', parent);
        this.predicate = predicate;
    }
    /**
     * Get all of the available services.
     */
    get services() {
        return this.parent.services
            .filter(this.predicate);
    }
    get(id) {
        const service = this.parent.get(id);
        if (service && this.predicate(service)) {
            return service;
        }
        return null;
    }
    handleParentServiceAvailable(service) {
        if (this.predicate(service)) {
            this.updateService(service);
        }
    }
    handleParentServiceUnavailable(service) {
        this.removeService(service);
    }
    handleParentServiceUpdate(service) {
        if (this.predicate(service)) {
            /*
             * Either the service still matches or it now matches. Make it
             * available in this discovery.
             */
            this.updateService(service);
        }
        else {
            /*
             * Remove the service is if it no longer matches.
             */
            this.removeService(service.id);
        }
    }
}
//# sourceMappingURL=filtered-service-discovery.js.map