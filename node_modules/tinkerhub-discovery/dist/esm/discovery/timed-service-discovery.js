var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ExpiringServiceDiscovery } from './expiring-service-discovery';
export class TimedServiceDiscovery extends ExpiringServiceDiscovery {
    constructor(type, options) {
        super(type, options);
        const searchTime = options.searchTime;
        this.debug('Searching every', searchTime, 'ms');
        this.searchInterval = setInterval(() => {
            this.debug('Searching for services');
            try {
                this.search();
            }
            catch (ex) {
                this.logAndEmitError(ex, 'Caught error during search');
            }
        }, searchTime);
    }
    destroy() {
        const _super = Object.create(null, {
            destroy: { get: () => super.destroy }
        });
        return __awaiter(this, void 0, void 0, function* () {
            clearInterval(this.searchInterval);
            yield _super.destroy.call(this);
        });
    }
}
//# sourceMappingURL=timed-service-discovery.js.map